{"version":3,"sources":["components/ImageGallery/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Searchbar.jsx","components/ImageGallery/Button.jsx","components/Modal.jsx","api/pixabay.js","App.js","js/scroll.js","index.js"],"names":["ImageGalleryItem","props","className","src","url","alt","description","data-url","largeUrl","onClick","event","setImageOnClick","currentTarget","dataset","ImageGallery","gallery","map","image","webformatURL","largeImageURL","tags","onClickGalleryItem","id","Searchbar","useState","query","setQuery","onSubmit","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","Button","Modal","isOpen","isModalOpen","onRequestClose","whenModalClose","overlayClassName","ariaHideApp","largeImageForModal","getImage","pageNumber","axios","get","then","data","App","setGallery","findQuery","currentPage","setCurrentPage","isLoading","setLoading","setImageUrl","useEffect","hits","catch","error","alert","finally","prevState","window","scrollTo","top","document","documentElement","scrollHeight","behavior","color","height","width","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.55fedc64.chunk.js","sourcesContent":["import propTypes from \"prop-types\";\r\nfunction ImageGalleryItem(props) {\r\n  const handleClick = (event) => {\r\n    props.setImageOnClick(event.currentTarget.dataset.url);\r\n  };\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={props.url}\r\n        alt={props.description}\r\n        className=\"ImageGalleryItem-image\"\r\n        data-url={props.largeUrl}\r\n        onClick={handleClick}\r\n      />\r\n    </li>\r\n  );\r\n}\r\nImageGalleryItem.propTypes = {\r\n  url: propTypes.string,\r\n  largeUrl: propTypes.string,\r\n  description: propTypes.string,\r\n  setImageOnClick: propTypes.func.isRequired,\r\n};\r\nexport default ImageGalleryItem;\r\n","import ImageGalleryItem from \"./ImageGalleryItem\";\r\nimport propTypes from \"prop-types\";\r\n\r\nfunction ImageGallery(props) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {props.gallery.map((image) => (\r\n        <ImageGalleryItem\r\n          key={image.id}\r\n          url={image.webformatURL}\r\n          largeUrl={image.largeImageURL}\r\n          description={image.tags}\r\n          setImageOnClick={props.onClickGalleryItem}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nImageGallery.propTypes = {\r\n  gallery: propTypes.array,\r\n  onClickGalleryItem: propTypes.func.isRequired,\r\n};\r\nexport default ImageGallery;\r\n","import React, { useState } from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nfunction Searchbar(props) {\r\n  const [query, setQuery] = useState(\"\");\r\n  const handleChange = (event) => {\r\n    setQuery(event.currentTarget.value);\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.onSubmit(query);\r\n  };\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          value={query}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\nSearchbar.propTypes = {\r\n  onSubmit: propTypes.func.isRequired,\r\n};\r\nexport default Searchbar;\r\n","import propTypes from \"prop-types\";\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <button className=\"Button\" onClick={props.onClick}>\r\n      load more\r\n    </button>\r\n  );\r\n}\r\nButton.propTypes = {\r\n  onClick: propTypes.func.isRequired,\r\n};\r\nexport default Button;\r\n","import propTypes from \"prop-types\";\r\nimport ReactModal from \"react-modal\";\r\n\r\nfunction Modal(props) {\r\n  return (\r\n    <ReactModal\r\n      isOpen={props.isModalOpen}\r\n      onRequestClose={props.whenModalClose}\r\n      className=\"Modal\"\r\n      overlayClassName=\"Overlay\"\r\n      ariaHideApp={false}\r\n    >\r\n      <div>\r\n        <img src={props.largeImageForModal} alt=\"\" />\r\n      </div>\r\n    </ReactModal>\r\n  );\r\n}\r\nModal.propTypes = {\r\n  largeImageForModal: propTypes.string,\r\n  whenModalClose: propTypes.func,\r\n  isModalOpen: propTypes.bool,\r\n};\r\nexport default Modal;\r\n","import axios from \"axios\";\r\n\r\nconst USER_KEY = \"19268663-7f88b2c67b4246c5b4cd88041\";\r\n/**\r\n *\r\n * @param {string} query - keyword for to find images\r\n * @param {number} pageNumber - the number page on pixabay\r\n */\r\nexport const getImage = (query, pageNumber) => {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${query}&page=${pageNumber}&key=${USER_KEY}&image_type=photo&orientation=horizontal&per_page=12`\r\n    )\r\n    .then(({ data }) => data);\r\n};\r\n","import Loader from \"react-loader-spinner\";\nimport ImageGallery from \"./components/ImageGallery/ImageGallery\";\nimport Searchbar from \"./components/Searchbar\";\nimport Button from \"./components/ImageGallery/Button\";\nimport Modal from \"./components/Modal\";\nimport React, { useState, useEffect } from \"react\";\nimport { getImage } from \"./api/pixabay.js\";\nimport { scroll } from \"./js/scroll.js\";\nimport \"./style.css\";\n\nfunction App() {\n  const [gallery, setGallery] = useState([]);\n  const [findQuery, setQuery] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isLoading, setLoading] = useState(false);\n  const [largeImageForModal, setImageUrl] = useState(\"\");\n  /**\n   * This func set in state keyword for find image\n   * @param {String} query - keyword for to find images\n   */\n  const handleGetQuery = (query) => {\n    setQuery(query);\n  };\n\n  /**\n   * Function increment currentPage on 1\n   */\n  const hanbleGetMore = () => {\n    setCurrentPage((prevState) => prevState + 1);\n  };\n  /**\n   * This func set in state URL of large image\n   * @param {string} url - URL of large image\n   */\n  const setImageForModal = (url) => {\n    setImageUrl(url);\n  };\n  /**\n   * This func delete in state URL of large image. This fucn controls opening modal window\n   */\n  const modalCloser = () => {\n    setImageUrl(\"\");\n  };\n  useEffect(() => {\n    setLoading(true);\n    getImage(findQuery, currentPage)\n      .then(({ hits }) => setGallery(hits))\n      .catch((error) => alert(error))\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (currentPage !== 1) {\n      setLoading(true);\n      getImage(findQuery, currentPage)\n        .then(({ hits }) => {\n          setGallery((prevState) => [...prevState, ...hits]);\n          scroll();\n        })\n        .catch((error) => alert(error))\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [currentPage]);\n\n  useEffect(() => {\n    setLoading(true);\n    getImage(findQuery, 1)\n      .then(({ hits }) => setGallery(hits))\n      .catch((error) => alert(error))\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [findQuery]);\n\n  return (\n    <>\n      <div className=\"wrapperApp\">\n        <Searchbar onSubmit={handleGetQuery} />\n        <ImageGallery gallery={gallery} onClickGalleryItem={setImageForModal} />\n        {isLoading && (\n          <>\n            <Loader\n              className=\"loader\"\n              type=\"Puff\"\n              color=\"#FFBFFF\"\n              height={50}\n              width={50}\n            />\n          </>\n        )}\n        {gallery.length !== 0 && <Button onClick={hanbleGetMore} />}\n        <Modal\n          whenModalClose={modalCloser}\n          isModalOpen={largeImageForModal !== \"\" ? true : false}\n          largeImageForModal={largeImageForModal}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/**\r\n * Scrolling window to end\r\n */\r\nexport const scroll = () => {\r\n  window.scrollTo({\r\n    top: document.documentElement.scrollHeight,\r\n    behavior: \"smooth\",\r\n  });\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}